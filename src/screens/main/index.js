import React, { Component } from "react";

// import test baidu Voice module
import VoiceUtils from '../util/VoiceUtils';

// import AMapLocation from 'react-native-amap-location';
import {AppRegistry,StyleSheet,ActivityIndicator} from 'react-native';
import sorage from "../util/MySorage";

var Geolocation = require('Geolocation');  //要引用定位连接，否则会提示找不到对象，很多资料都没说到这一点。
var PushNotification = require('react-native-push-notification');

import {
  Container,
  Header,
  Title,
  Text,
  Content,
  Button,
  Footer,
  FooterTab,
  Body,
  Left,
  Right,
  Icon
} from "native-base";
import styles from "./styles";
var storage;

class Main extends Component {
  constructor(props) {
    super(props);

    this.state = {
      tab1: false,
      tab2: false,
      tab3: true,
      tab4: false,
      LocalPosition:'',
      latitude:'fasdf',
      longitude:'fasdf',
      timeout:'1'
    };

  }


  GetGeolocation(){
        /*
        说明：getCurrentPosition(fun_success,fun_error,geo_options)
        成功回调函数与失败回调函数的写法， 应该使用箭头函数方式，因为回调结果可以供当前页面的this所调用，否则当前页面使用不了。
        例：getCurrentPosition(function(val){ this.setState....  },function(val){ this.setState....})
        会提示未定义函数或找不到对像，错误位置为this.setState

        */
        Geolocation.getCurrentPosition(val => {
            let ValInfo = "速度：" + val.coords.speed +
                "\n经度：" + val.coords.longitude +
                "\n纬度：" + val.coords.latitude +
                "\n准确度：" + val.coords.accuracy +
                "\n时间戳：" + val.timestamp;
            this.setState({LocalPosition: ValInfo});
        }, val => {
            let ValInfo = '获取坐标失败：' + val;
            this.setState({LocalPosition: ValInfo});
        });
    }
  toggleTab1(){
    this.setState({
      tab1: true,
      tab2: false,
      tab3: false,
      tab4: false
    });
  }
  toggleTab2(){
    this.setState({
      tab1: false,
      tab2: true,
      tab3: false,
      tab4: false
    });
  }
  toggleTab3(){
    this.setState({
      tab1: false,
      tab2: false,
      tab3: true,
      tab4: false
    });
  }
  toggleTab4(){
    this.setState({
      tab1: false,
      tab2: false,
      tab3: false,
      tab4: true
    });
  }

  componentDidMount() {
      PushNotification.configure({

          // (optional) Called when Token is generated (iOS and Android)
          onRegister: function(token) {
              console.log( 'TOKEN:', token );
          },

          // (required) Called when a remote or local notification is opened or received
          onNotification: function(notification) {
              console.log( 'NOTIFICATION:', notification );
              // process the notification
              // required on iOS only (see fetchCompletionHandler docs: https://facebook.github.io/react-native/docs/pushnotificationios.html)
              // notification.finish(PushNotificationIOS.FetchResult.NoData);
          },

          // ANDROID ONLY: GCM Sender ID (optional - not required for local notifications, but is need to receive remote push notifications)
          senderID: "93276407359",

          // IOS ONLY (optional): default: all - Permissions to register.
          permissions: {
              alert: true,
              badge: true,
              sound: true
          },

          // Should the initial notification be popped automatically
          // default: true
          popInitialNotification: true,

          /**
           * (optional) default: true
           * - Specified if permissions (ios) and token (android and ios) will requested or not,
           * - if not, you must call PushNotificationsHandler.requestPermissions() later
           */
          requestPermissions: true,
      });

<<<<<<< HEAD
      this.getSession("sessionid")
      this.timer = setInterval(
          ()=>{
            VoiceUtils.speak("欢迎李总，我们在测试",1);
            // this.unlisten = AMapLocation.addEventListener((data) =>   this.setState({
            //    latitude: data.latitude ,
            //    longitude: data.longitude
            //  }));
            // AMapLocation.startLocation({
            //   accuracy: 'HighAccuracy',
            //   killProcess: true,
            //   needDetail: true,
            // });
            //   this.GetGeolocation();
=======
    this.timer = setInterval(
          ()=>{
              PushNotification.localNotification({
                  /* Android Only Properties */
                  id: '0', // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
                  ticker: "My Notification Ticker", // (optional)
                  autoCancel: true, // (optional) default: true
                  largeIcon: "ic_launcher", // (optional) default: "ic_launcher"
                  smallIcon: "ic_notification", // (optional) default: "ic_notification" with fallback for "ic_launcher"
                  bigText: "My big text that will be shown when notification is expanded", // (optional) default: "message" prop
                  subText: "This is a subText", // (optional) default: none
                  color: "red", // (optional) default: system default
                  vibrate: true, // (optional) default: true
                  vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
                  tag: 'some_tag', // (optional) add tag to message
                  group: "group", // (optional) add group to message
                  ongoing: false, // (optional) set whether this is an "ongoing" notification

                  /* iOS only properties */
              //     alertAction: // (optional) default: view
              //     category: // (optional) default: null
              // userInfo: // (optional) default: null (object containing additional notification data)

                  /* iOS and Android properties */
                  title: "My Notification Title", // (optional, for iOS this is only used in apple watch, the title will be the app name on other iOS devices)
                      message: "My Notification Message", // (required)
                  playSound: false, // (optional) default: true
                  soundName: 'default', // (optional) Sound to play when the notification is shown. Value of 'default' plays the default sound. It can be set to a custom sound such as 'android.resource://com.xyz/raw/my_sound'. It will look for the 'my_sound' audio file in 'res/raw' directory and play it. default: 'default' (default sound is played)
                  number: '10', // (optional) Valid 32 bit integer specified as string. default: none (Cannot be zero)
                  repeatType: 'day', // (Android only) Repeating interval. Could be one of `week`, `day`, `hour`, `minute, `time`. If specified as time, it should be accompanied by one more parameter 'repeatTime` which should the number of milliseconds between each interval
                  actions: '["Yes", "No"]',  // (Android only) See the doc for notification actions to know more
          });
>>>>>>> b4e4db1ff0807df60960accb7913c1a0ec126961
          },
          2000,
        );

}
    getSession(key){
        storage.load({
            key: key,
            // autoSync(默认为true)意味着在没有找到数据或数据过期时自动调用相应的sync方法
            autoSync: false,
            // syncInBackground(默认为true)意味着如果数据过期，
            // 在调用sync方法的同时先返回已经过期的数据。
            // 设置为false的话，则始终强制返回sync方法提供的最新数据(当然会需要更多等待时间)。
            syncInBackground: false,

            // 你还可以给sync方法传递额外的参数
            // syncParams:{ params,
            //     someFlag: someFlag,
            // },
        }).then(ret => {

            this.setState({LocalPosition: ret})

            return ret;
        }).catch(err => {
            //如果没有找到数据且没有sync方法，
            //或者有其他异常，则在catch中返回
            this.props.navigation.navigate("Login");
            console.log(err.message);
            switch (err.name) {
                case 'NotFoundError':
                    // TODO;
                    break;
                case 'ExpiredError':
                    // TODO
                    break;
            }
        });
    }


componentWillUnmount() {
  // AMapLocation.stopLocation();
  this.timer && clearTimeout(this.timer)

  // this.unlisten();
}


  render(){
    return (
      <Container style={styles.container}>
        <Header>
          <Left>
            <Button transparent
                    onPress={() => this.props.navigation.navigate("DrawerOpen")}
            >
              <Icon name="menu" />
            </Button>
          </Left>
          <Body>
            <Title>Footer</Title>
          </Body>
          <Right />
        </Header>

        <Content padder />
          <Text style={{padding: 10, fontSize: 42}}>
                  {this.state.LocalPosition}
          </Text>
          <Text style={{padding: 10, fontSize: 42}}>
                          {this.state.latitude}
          </Text>
          <Text style={{padding: 10, fontSize: 42}}>
                          {this.state.longitude}
          </Text>
        <Footer>
          <FooterTab>
            <Button active={this.state.tab1} onPress={() => this.componentDidMount()}>
              <Icon active={this.state.tab1} name="apps" />
            </Button>
            <Button active={this.state.tab2} onPress={() => this.componentWillUnmount()}>
              <Icon active={this.state.tab2} name="camera" />
            </Button>
            <Button active={this.state.tab3} onPress={() => this.toggleTab3()}>
              <Icon active={this.state.tab3} name="compass" />
            </Button>
            <Button active={this.state.tab4} onPress={() => this.toggleTab4()}>
              <Icon active={this.state.tab4} name="contact" />
            </Button>
          </FooterTab>
        </Footer>
      </Container>
    );
  }
}


export default Main;
